{"version":3,"sources":["shared/Pager.tsx","shared/BootstrapTable.tsx","elephant.svg","Elephant.tsx","shared/useStorageState.ts","reportWebVitals.ts","index.tsx","../../discojs/lib/index.es.js"],"names":["Pager","count","pageSize","currentPage","gotoPage","spine","variant","React","useMemo","maxPage","Math","ceil","minShownPage","minShownPageSm","maxShownPageSm","maxShownPage","abs","max","MAX_PAGES","min","currentPageSpine","Row","className","Col","InputGroup","Prepend","Button","disabled","onClick","clamp","Text","range","map","page","PageButton","autoHide","Form","Control","type","value","toString","onChange","target","Number","Append","spineA","spineB","BootstrapTable","props","useTable","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","canPreviousPage","canNextPage","pageOptions","pageCount","setPageSize","nextPage","previousPage","state","pageIndex","pager","length","Table","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","e","Elephant","storage","key","defaultValue","window","localStorage","sessionStorage","currentValue","storageSet","setItem","bind","storageValue","getItem","JSON","parse","console","error","undefined","result","useState","useEffect","stringify","useStorageState","token","setToken","client","useCallback","Discojs","userAgent","userToken","setError","identity","setIdentity","inventory","setInventory","folders","setFolders","fields","setFields","profile","setProfile","collection","useRef","Date","collectionTimestamp","setCollectionTimestamp","getProfile","then","listFolders","getIdentity","getInventory","listCustomFields","Map","field","id","listItemsInFolder","r","all","addToCollection","avararUrl","avatar_url","collectionTableData","Object","values","current","collectionTableColumns","Header","accessor","Navbar","bg","expand","Brand","Figure","Image","width","rounded","src","logo","alt","Toggle","Collapse","inline","Group","Label","href","resource_url","consumer_name","username","Container","isEmpty","Alert","columns","data","collapsed","Array","from","items","newItems","forEach","item","instance_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","log","DataQualityEnum","CommunityStatusesEnum","ReleaseConditionsEnum","SleeveConditionsEnum","CurrenciesEnum","FolderIdsEnum","InventoryStatusesEnum","InventorySortEnum","ListingStatusesEnum","EditOrderStatusesEnum","OrderStatusesEnum","OrderSortEnum","OrderMessageTypesEnum","ReleaseSortEnum","SearchTypeEnum","UserSortEnum","HTTPVerbsEnum","AuthError","name","message","statusCode","setPrototypeOf","prototype","Error","DiscogsError","code","fetch","url","options","shouldReturnBlob","a","crossFetch","response","status","statusText","Promise","resolve","blob","json","addQueryToUri","uri","query","definedKeys","entries","reduce","acc","transformData","replace","letter","toLowerCase","SortOrdersEnum","paginate","perPage","per_page","sortBy","defaultSortBy","by","order","sort","sort_order","ASC","OutputFormatsEnum","API_BASE_URL","isAuthenticatedWithToken","Boolean","isAuthenticatedWithConsumerKey","consumerKey","consumerSecret","oAuthToken","oAuthTokenSecret","isAuthenticated","outputFormat","DISCOGS","requestLimit","requestLimitAuth","requestLimitInterval","fetchOptions","this","limiter","concurrency","maxRequests","Bottleneck","maxConcurrent","minTime","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","createLimiter","fetchHeaders","Headers","Accept","Connection","setAuthorizationHeader","oAuth","OAuth","consumer","secret","signature_method","version","method","authObject","authorize","toHeader","Authorization","isApiEndpoint","startsWith","isImgEndpoint","endpoint","GET","set","clonedHeaders","stringifiedData","body","Buffer","byteLength","fromEntries","schedule","getUsername","getProfileForUser","POST","pagination","getSubmissionsForUser","ADDED","getContributionsForUser","listFoldersForUser","folderId","getFolderForUser","DELETE","release_id","listItemsByReleaseForUser","listItemsInFolderForUser","releaseId","UNCATEGORIZED","instanceId","rating","oldFolderId","newFolderId","listCustomFieldsForUser","fieldId","getWantlistForUser","notes","PUT","getListsForUser","listId","searchDatabase","RELEASE","currency","getReleaseRatingForUser","MASTER","masterId","ARTIST","artistId","YEAR","LABEL","labelId","ALL","LISTED","getInventoryForUser","listingId","orderId","shipping","archived","ID","price","imageUrl","next","urls","onProgress","concat"],"mappings":"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","file":"static/js/main.d6a8a35d.chunk.js","sourcesContent":["import clamp from \"lodash/clamp\";\nimport range from \"lodash/range\";\nimport React from \"react\";\nimport Button, { ButtonProps } from \"react-bootstrap/esm/Button\";\nimport Col from \"react-bootstrap/esm/Col\";\nimport Form from \"react-bootstrap/esm/Form\";\nimport InputGroup from \"react-bootstrap/esm/InputGroup\";\nimport Row from \"react-bootstrap/esm/Row\";\nimport {\n    FiChevronsLeft,\n    FiChevronsRight,\n    FiChevronLeft,\n    FiChevronRight,\n    FiMoreHorizontal,\n} from \"react-icons/fi\";\nimport \"./Pager.scss\";\n\nconst MAX_PAGES = 8;\n\nexport default function Pager({\n    count,\n    pageSize,\n    currentPage,\n    gotoPage,\n    spine,\n    variant,\n}: {\n    count: number,\n    pageSize: number,\n    currentPage: number,\n    gotoPage: (page: number) => void,\n    spine?: SpineFactory,\n    variant?: ButtonProps[\"variant\"],\n}) {\n    const { maxPage, minShownPage, minShownPageSm, maxShownPageSm, maxShownPage } = React.useMemo(() => {\n        const maxPage = Math.ceil(count / pageSize) - 1;\n        let [minShownPage, minShownPageSm, maxShownPageSm, maxShownPage] = [0, 0, maxPage, maxPage];\n        if (Math.abs(currentPage - minShownPage) < Math.abs(currentPage - maxShownPage)) {\n            minShownPage = Math.max(0, currentPage - MAX_PAGES / 2);\n            minShownPageSm = Math.max(0, currentPage - 2);\n            maxShownPageSm = Math.min(maxPage, minShownPageSm + 4);\n            maxShownPage = Math.min(maxPage, minShownPage + MAX_PAGES);\n        } else {\n            maxShownPage = Math.min(maxShownPage, currentPage + MAX_PAGES / 2);\n            maxShownPageSm = Math.min(maxShownPage, currentPage + 2);\n            minShownPageSm = Math.max(0, maxShownPageSm - 4);\n            minShownPage = Math.max(0, maxShownPage - MAX_PAGES);\n        }\n        return { maxPage, minShownPage, minShownPageSm, maxShownPageSm, maxShownPage };\n    }, [count, currentPage, pageSize]);\n    variant = variant || \"outline-secondary\";\n    const currentPageSpine = React.useMemo(() => spine?.(currentPage), [spine, currentPage]);\n    return <Row className=\"Pager\">\n        <Col>\n            <InputGroup>\n                <InputGroup.Prepend>\n                    <Button\n                        key={\"min page\"}\n                        variant={variant}\n                        disabled={currentPage === 0}\n                        onClick={() => gotoPage(0)}\n                    >\n                        <FiChevronsLeft />\n                    </Button>\n                    <Button\n                        key={\"page - 1\"}\n                        variant={variant}\n                        disabled={currentPage === 0}\n                        onClick={() => gotoPage(clamp(currentPage - 1, 0, maxPage))}\n                    >\n                        <FiChevronLeft />\n                    </Button>\n                    {0 < minShownPageSm && <InputGroup.Text className={0 < minShownPage ? \"\" : \"auto-show-md\"} key={0}>\n                        <FiMoreHorizontal />\n                    </InputGroup.Text>}\n                    {minShownPage < currentPage && range(minShownPage, currentPage).map((page: number) =>\n                        <PageButton key={page} autoHide={page < minShownPageSm} spine={spine} gotoPage={gotoPage} page={page} variant={variant} />)}\n                    {currentPageSpine?.[0] && <InputGroup.Text>{currentPageSpine[0]}</InputGroup.Text>}\n                </InputGroup.Prepend>\n                <Form.Control\n                    key={currentPage + 1}\n                    className=\"spine\"\n                    type=\"number\"\n                    min={1}\n                    max={maxPage + 1}\n                    value={(currentPage + 1).toString()}\n                    onChange={({ target: { value } }) => gotoPage(clamp(Number(value) - 1, 0, maxPage))} />\n                <InputGroup.Append>\n                    {currentPageSpine?.[1] && <InputGroup.Text>{currentPageSpine[1]}</InputGroup.Text>}\n                    {currentPage < maxShownPage && range(currentPage + 1, maxShownPage + 1).map((page: number) =>\n                        <PageButton key={page}  autoHide={page > maxShownPageSm} spine={spine} gotoPage={gotoPage} page={page} variant={variant} />)}\n                    {maxShownPage < maxPage && <InputGroup.Text key={maxPage}>\n                        <FiMoreHorizontal />\n                    </InputGroup.Text>}\n                    <Button\n                        key={\"page + 1\"}\n                        variant={variant}\n                        disabled={currentPage === maxPage}\n                        onClick={() => gotoPage(clamp(currentPage + 1, 0, maxPage))}\n                    >\n                        <FiChevronRight />\n                    </Button>\n                    <Button\n                        key={\"max page\"}\n                        variant={variant}\n                        disabled={currentPage === maxPage}\n                        onClick={() => gotoPage(maxPage)}\n                    >\n                        <FiChevronsRight />\n                    </Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </Col>\n    </Row>;\n}\n\ntype Spine = [from: string, to: string];\n\ntype SpineFactory = (page: number) => Spine;\n\nfunction PageButton({\n    autoHide,\n    page,\n    spine,\n    gotoPage,\n    variant,\n}: {\n    autoHide: boolean,\n    page: number,\n    spine?: SpineFactory,\n    gotoPage: (page: number) => void,\n    variant: ButtonProps[\"variant\"],\n}) {\n    const [spineA, spineB] = spine?.(page) ?? [];\n    return <Button className={autoHide ? \"spine auto-hide-md\" : \"spine\"} key={page + 1} variant={variant} onClick={() => gotoPage(page)}>\n        {spineA && <div className=\"from\">\n            {spineA}\n        </div>}\n        {page + 1}\n        {spineB && <div className=\"to\">\n            {spineB}\n        </div>}\n    </Button>;\n}\n","import React from \"react\";\nimport Table from \"react-bootstrap/esm/Table\";\nimport {\n    Column,\n    TableInstance,\n    usePagination,\n    UsePaginationInstanceProps,\n    UsePaginationState,\n    useTable,\n} from \"react-table\";\nimport Pager from \"./Pager\";\n\nexport default function BootstrapTable<TElement extends {}>(props: { columns: Column<TElement>[], data: TElement[] }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        rows,\n        page, // Instead of using 'rows', we'll use page,\n        // which has only the rows for the active page\n\n        // The rest of these things are super handy, too ;)\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        props,\n        usePagination,\n    ) as TableInstance<TElement> & UsePaginationInstanceProps<TElement> & { state: UsePaginationState<TElement> };\n    const pager = <Pager\n        count={rows.length}\n        currentPage={pageIndex}\n        gotoPage={gotoPage}\n        pageSize={pageSize}\n    />\n    return <>\n        {pager}\n        <Table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </Table>\n        {pager}\n            <select\n                value={pageSize}\n                onChange={e => {\n                    setPageSize(Number(e.target.value))\n                }}\n            >\n                {[10, 20, 30, 40, 50].map(pageSize => (\n                    <option key={pageSize} value={pageSize}>\n                        Show {pageSize}\n                    </option>\n                ))}\n            </select>\n    </>;\n}\n","export default __webpack_public_path__ + \"static/media/elephant.ac9ac1b2.svg\";","import React from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport { Discojs } from 'discojs';\nimport ReactJson from 'react-json-view';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport useStorageState from './shared/useStorageState';\nimport Form from 'react-bootstrap/esm/Form';\nimport Figure from 'react-bootstrap/esm/Figure';\nimport { Column } from 'react-table';\nimport BootstrapTable from './shared/BootstrapTable';\nimport Alert from 'react-bootstrap/esm/Alert';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport logo from './elephant.svg';\nimport isEmpty from 'lodash/isEmpty';\n\ntype PromiseType<TPromise> = TPromise extends Promise<infer T> ? T : never;\ntype ElementType<TArray> = TArray extends Array<infer T> ? T : never;\n\ntype Identity = PromiseType<ReturnType<Discojs[\"getIdentity\"]>>;\n\n/** listings for sale */\ntype Inventory = PromiseType<ReturnType<Discojs[\"getInventory\"]>>;\n\ntype FieldsResponse = PromiseType<ReturnType<Discojs[\"listCustomFields\"]>>;\ntype Folders = PromiseType<ReturnType<Discojs[\"listFolders\"]>>;\n\ntype Folder = PromiseType<ReturnType<Discojs[\"listItemsInFolder\"]>>;\n\ntype CollectionItems = Folder[\"releases\"];\n\ntype CollectionItem = ElementType<CollectionItems>;\n\ntype Collection = { [instanceId: number]: CollectionItem };\n\ntype Profile = PromiseType<ReturnType<Discojs[\"getProfile\"]>> & {\n  avatar_url?: string,\n};\n\ntype Fields = Map<number, ElementType<FieldsResponse[\"fields\"]>>;\n\n/**\n \"pagination\": {\n  \"page\": 1,\n  \"pages\": 13,\n  \"per_page\": 50,\n  \"items\": 632,\n  \"urls\": {\n    \"last\": \"https://api.discogs.com/users/pyrogenique/collection/folders/0/releases?sort=added&sort_order=asc&page=13&per_page=50\",\n    \"next\": \"https://api.discogs.com/users/pyrogenique/collection/folders/0/releases?sort=added&sort_order=asc&page=2&per_page=50\"\n  }\n}\n*/\n\nexport default function Elephant() {\n  const [token, setToken] = useStorageState<string>(\"local\", \"DiscogsUserToken\", \"\");\n\n  const client = React.useCallback(() => {\n    return new Discojs({\n      userAgent: \"Elephant/0.1.0 +https://pyrogenic.github.io/elephant\",\n      userToken: token,\n    });\n  }, [token]);\n\n  const [error, setError] = React.useState<any>();\n  const [identity, setIdentity] = React.useState<Identity>();\n  const [inventory, setInventory] = React.useState<Inventory>();\n  const [folders, setFolders] = React.useState<Folders>();\n  const [fields, setFields] = React.useState<Fields>();\n  const [profile, setProfile] = React.useState<Profile>();\n  const collection = React.useRef<Collection>({});\n  const [collectionTimestamp, setCollectionTimestamp] = React.useState<Date>(new Date());\n  React.useEffect(getIdentity, [client]);\n  React.useEffect(getCollection, [client]);\n  const avararUrl = React.useCallback(() => profile?.avatar_url, [profile]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const collectionTableData = React.useCallback(() => Object.values(collection.current), [collectionTimestamp]);\n  const collectionTableColumns = React.useMemo<Column<CollectionItem>[]>(() => [\n    {\n      Header: \"Release\",\n      accessor: 'id',\n    }\n  ], []);\n  return <>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand>\n        <Figure.Image\n          width={32}\n          rounded\n          src={logo}\n          alt=\"Elephant\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n      <Form inline>\n        <Form.Group>\n          <Form.Label>Discogs Token</Form.Label>\n          <Form.Control\n            value={token}\n            onChange={({ target: { value } }) => setToken(value)}\n          />\n        </Form.Group>\n      </Form>\n        {avararUrl() && <Navbar.Text>\n          <a href={identity?.resource_url} target=\"blank\">{identity?.consumer_name}</a>\n          <Figure.Image\n            width={32}\n            src={avararUrl()}\n            alt={profile?.username}\n          />\n        </Navbar.Text>\n        }\n      </Navbar.Collapse>\n    </Navbar>\n    <Container>\n      {!isEmpty(error) && <Alert variant=\"warning\">\n        <code>{JSON.stringify(error, null, 2)}</code>\n      </Alert>}\n      <BootstrapTable columns={collectionTableColumns} data={collectionTableData()} />\n      {collection.current && <ReactJson src={collection.current} collapsed={true} />}\n      {folders && <ReactJson src={folders} collapsed={true} />}\n      {identity && <ReactJson src={identity} collapsed={true} />}\n      {profile && <ReactJson src={profile} collapsed={true} />}\n      {inventory && <ReactJson src={inventory} collapsed={true} />}\n      {fields && <ReactJson src={Array.from(fields)} collapsed={true} />}\n    </Container>\n  </>;\n\n  function getIdentity() {\n    client().getProfile().then(setProfile, setError);\n    client().listFolders().then(setFolders, setError);\n    client().getIdentity().then(setIdentity, setError);\n    client().getInventory().then(setInventory, setError);\n  }\n\n  function addToCollection(items: CollectionItems) {\n    const newItems: Collection = {};\n    items.forEach((item) => newItems[item.instance_id] = item);\n    collection.current = { ...collection.current, ...newItems };\n    setCollectionTimestamp(new Date());\n  }\n\n  function getCollection() {\n    client().listCustomFields().then(({ fields }) => setFields(new Map(\n      fields.map((field) => [field.id, field])\n    )), setError);\n\n    client().listItemsInFolder(0).then(((r) => client().all(\"releases\", r, addToCollection)), setError);\n\n  }\n}\n","import React from \"react\";\n\ntype TDefaultValue<T> = T | (T extends Function ? never : (() => T));\n\nexport default function useStorageState<T>(\n    storage: Storage | \"local\" | \"session\", key: string, defaultValue: TDefaultValue<T>) {\n    if (storage === \"local\") {\n        storage = window.localStorage;\n    } else if (storage === \"session\") {\n        storage = window.sessionStorage;\n    }\n    const storageSet = storage.setItem.bind(storage, key);\n    const storageValue = storage.getItem(key);\n    let currentValue: TDefaultValue<T> | undefined;\n    if (storageValue !== null) {\n        try {\n            currentValue = JSON.parse(storageValue) as TDefaultValue<T>;\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    if (currentValue === undefined) {\n        currentValue = defaultValue;\n    }\n    const result = React.useState<T>(currentValue);\n    const [state] = result;\n    React.useEffect(effect, [state, storageSet]);\n    return result;\n    function effect() {\n        storageSet(JSON.stringify(state));\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Elephant from \"./Elephant\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Elephant />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n","import crossFetch, { Headers } from 'cross-fetch';\nimport OAuth from 'oauth-1.0a';\nimport { stringify } from 'querystring';\nimport Bottleneck from 'bottleneck';\n\nvar DataQualityEnum;\n(function (DataQualityEnum) {\n    DataQualityEnum[\"NEEDS_VOTE\"] = \"Needs Vote\";\n    DataQualityEnum[\"NEEDS_MINOR_CHANGE\"] = \"Needs Minor Changes\";\n    DataQualityEnum[\"CORRECT\"] = \"Correct\";\n})(DataQualityEnum || (DataQualityEnum = {}));\nvar CommunityStatusesEnum;\n(function (CommunityStatusesEnum) {\n    CommunityStatusesEnum[\"ACCEPTED\"] = \"Accepted\";\n})(CommunityStatusesEnum || (CommunityStatusesEnum = {}));\n\nvar ReleaseConditionsEnum;\n(function (ReleaseConditionsEnum) {\n    ReleaseConditionsEnum[\"MINT\"] = \"Mint (M)\";\n    ReleaseConditionsEnum[\"NEAR_MINT\"] = \"Near Mint (NM or M-)\";\n    ReleaseConditionsEnum[\"VERY_GOOD_PLUS\"] = \"Very Good Plus (VG+)\";\n    ReleaseConditionsEnum[\"VERY_GOOD\"] = \"Very Good (VG)\";\n    ReleaseConditionsEnum[\"GOOD_PLUS\"] = \"Good Plus (G+)\";\n    ReleaseConditionsEnum[\"GOOD\"] = \"Good (G)\";\n    ReleaseConditionsEnum[\"FAIR\"] = \"Fair (F)\";\n    ReleaseConditionsEnum[\"POOR\"] = \"Poor (P)\";\n})(ReleaseConditionsEnum || (ReleaseConditionsEnum = {}));\nvar SleeveConditionsEnum;\n(function (SleeveConditionsEnum) {\n    SleeveConditionsEnum[\"MINT\"] = \"Mint (M)\";\n    SleeveConditionsEnum[\"NEAR_MINT\"] = \"Near Mint (NM or M-)\";\n    SleeveConditionsEnum[\"VERY_GOOD_PLUS\"] = \"Very Good Plus (VG+)\";\n    SleeveConditionsEnum[\"VERY_GOOD\"] = \"Very Good (VG)\";\n    SleeveConditionsEnum[\"GOOD_PLUS\"] = \"Good Plus (G+)\";\n    SleeveConditionsEnum[\"GOOD\"] = \"Good (G)\";\n    SleeveConditionsEnum[\"FAIR\"] = \"Fair (F)\";\n    SleeveConditionsEnum[\"POOR\"] = \"Poor (P)\";\n    SleeveConditionsEnum[\"GENERIC\"] = \"Generic\";\n    SleeveConditionsEnum[\"NOT_GRADED\"] = \"Not Graded\";\n    SleeveConditionsEnum[\"NO_COVER\"] = \"No Cover\";\n})(SleeveConditionsEnum || (SleeveConditionsEnum = {}));\n\nvar CurrenciesEnum;\n(function (CurrenciesEnum) {\n    CurrenciesEnum[\"USD\"] = \"USD\";\n    CurrenciesEnum[\"GBP\"] = \"GBP\";\n    CurrenciesEnum[\"EUR\"] = \"EUR\";\n    CurrenciesEnum[\"CAD\"] = \"CAD\";\n    CurrenciesEnum[\"AUD\"] = \"AUD\";\n    CurrenciesEnum[\"JPY\"] = \"JPY\";\n    CurrenciesEnum[\"CHF\"] = \"CHF\";\n    CurrenciesEnum[\"MXN\"] = \"MXN\";\n    CurrenciesEnum[\"BRL\"] = \"BRL\";\n    CurrenciesEnum[\"NZD\"] = \"NZD\";\n    CurrenciesEnum[\"SEK\"] = \"SEK\";\n    CurrenciesEnum[\"ZAR\"] = \"ZAR\";\n})(CurrenciesEnum || (CurrenciesEnum = {}));\n\nvar FolderIdsEnum;\n(function (FolderIdsEnum) {\n    FolderIdsEnum[FolderIdsEnum[\"ALL\"] = 0] = \"ALL\";\n    FolderIdsEnum[FolderIdsEnum[\"UNCATEGORIZED\"] = 1] = \"UNCATEGORIZED\";\n})(FolderIdsEnum || (FolderIdsEnum = {}));\n\nvar InventoryStatusesEnum;\n(function (InventoryStatusesEnum) {\n    InventoryStatusesEnum[\"ALL\"] = \"All\";\n    InventoryStatusesEnum[\"DELETED\"] = \"Deleted\";\n    InventoryStatusesEnum[\"DRAFT\"] = \"Draft\";\n    InventoryStatusesEnum[\"EXPIRED\"] = \"Expired\";\n    InventoryStatusesEnum[\"FOR_SALE\"] = \"For Sale\";\n    InventoryStatusesEnum[\"SOLD\"] = \"Sold\";\n    InventoryStatusesEnum[\"SUSPENDED\"] = \"Suspended\";\n    InventoryStatusesEnum[\"VIOLATION\"] = \"Violation\";\n})(InventoryStatusesEnum || (InventoryStatusesEnum = {}));\nvar InventorySortEnum;\n(function (InventorySortEnum) {\n    InventorySortEnum[\"LISTED\"] = \"listed\";\n    InventorySortEnum[\"PRICE\"] = \"price\";\n    InventorySortEnum[\"ITEM\"] = \"item\";\n    InventorySortEnum[\"ARTIST\"] = \"artist\";\n    InventorySortEnum[\"LABEL\"] = \"label\";\n    InventorySortEnum[\"CATNO\"] = \"catno\";\n    InventorySortEnum[\"AUDIO\"] = \"audio\";\n    InventorySortEnum[\"STATUS\"] = \"status\";\n    InventorySortEnum[\"LOCATION\"] = \"location\";\n})(InventorySortEnum || (InventorySortEnum = {}));\n\nvar ListingStatusesEnum;\n(function (ListingStatusesEnum) {\n    ListingStatusesEnum[\"FOR_SALE\"] = \"For Sale\";\n    ListingStatusesEnum[\"DRAFT\"] = \"Draft\";\n})(ListingStatusesEnum || (ListingStatusesEnum = {}));\n\nvar EditOrderStatusesEnum;\n(function (EditOrderStatusesEnum) {\n    EditOrderStatusesEnum[\"NEW_ORDER\"] = \"New Order\";\n    EditOrderStatusesEnum[\"BUYER_CONTACTER\"] = \"Buyer Contacted\";\n    EditOrderStatusesEnum[\"INVOICE_SENT\"] = \"Invoice Sent\";\n    EditOrderStatusesEnum[\"PAYMENT_PENDING\"] = \"Payment Pending\";\n    EditOrderStatusesEnum[\"PAYMENT_RECEIVED\"] = \"Payment Received\";\n    EditOrderStatusesEnum[\"SHIPPED\"] = \"Shipped\";\n    EditOrderStatusesEnum[\"REFUND_SENT\"] = \"Refund Sent\";\n    EditOrderStatusesEnum[\"CANCELLED_NON_PAYING_BUYER\"] = \"Cancelled (Non-Paying Buyer)\";\n    EditOrderStatusesEnum[\"CANCELLED_ITEM_UNAVAILABLE\"] = \"Cancelled (Item Unavailable)\";\n    EditOrderStatusesEnum[\"CANCELLED_PER_BUYER_REQUEST\"] = \"Cancelled (Per Buyer's Request)\";\n})(EditOrderStatusesEnum || (EditOrderStatusesEnum = {}));\nvar OrderStatusesEnum;\n(function (OrderStatusesEnum) {\n    OrderStatusesEnum[\"ALL\"] = \"All\";\n    OrderStatusesEnum[\"NEW_ORDER\"] = \"New Order\";\n    OrderStatusesEnum[\"BUYER_CONTACTED\"] = \"Buyer Contacted\";\n    OrderStatusesEnum[\"INVOICE_SENT\"] = \"Invoice Sent\";\n    OrderStatusesEnum[\"PAYMENT_PENDING\"] = \"Payment Pending\";\n    OrderStatusesEnum[\"PAYMENT_RECEIVED\"] = \"Payment Received\";\n    OrderStatusesEnum[\"SHIPPED\"] = \"Shipped\";\n    OrderStatusesEnum[\"MERGED\"] = \"Merged\";\n    OrderStatusesEnum[\"ORDER_CHANGED\"] = \"Order Changed\";\n    OrderStatusesEnum[\"REFUND_SENT\"] = \"Refund Sent\";\n    OrderStatusesEnum[\"CANCELLED\"] = \"Cancelled\";\n    OrderStatusesEnum[\"CANCELLED_NON_PAYING_BUYER\"] = \"Cancelled (Non-Paying Buyer)\";\n    OrderStatusesEnum[\"CANCELLED_ITEM_UNAVAILABLE\"] = \"Cancelled (Item Unavailable)\";\n    OrderStatusesEnum[\"CANCELLED_PER_BUYER_REQUEST\"] = \"Cancelled (Per Buyer's Request)\";\n    OrderStatusesEnum[\"CANCELLED_REFUND_RECEIVED\"] = \"Cancelled (Refund Received)\";\n})(OrderStatusesEnum || (OrderStatusesEnum = {}));\nvar OrderSortEnum;\n(function (OrderSortEnum) {\n    OrderSortEnum[\"ID\"] = \"id\";\n    OrderSortEnum[\"BUYER\"] = \"buyer\";\n    OrderSortEnum[\"CREATED\"] = \"created\";\n    OrderSortEnum[\"STATUS\"] = \"status\";\n    OrderSortEnum[\"LAST_ACTIVITY\"] = \"last_activity\";\n})(OrderSortEnum || (OrderSortEnum = {}));\nvar OrderMessageTypesEnum;\n(function (OrderMessageTypesEnum) {\n    OrderMessageTypesEnum[\"STATUS\"] = \"status\";\n    OrderMessageTypesEnum[\"MESSAGE\"] = \"message\";\n    OrderMessageTypesEnum[\"SHIPPING\"] = \"shipping\";\n    OrderMessageTypesEnum[\"REFUND_SENT\"] = \"refund_sent\";\n    OrderMessageTypesEnum[\"REFUND_RECEIVED\"] = \"refund_received\";\n})(OrderMessageTypesEnum || (OrderMessageTypesEnum = {}));\n\nvar ReleaseSortEnum;\n(function (ReleaseSortEnum) {\n    ReleaseSortEnum[\"YEAR\"] = \"year\";\n    ReleaseSortEnum[\"TITLE\"] = \"title\";\n    ReleaseSortEnum[\"FORMAT\"] = \"format\";\n})(ReleaseSortEnum || (ReleaseSortEnum = {}));\n\nvar SearchTypeEnum;\n(function (SearchTypeEnum) {\n    SearchTypeEnum[\"RELEASE\"] = \"release\";\n    SearchTypeEnum[\"MASTER\"] = \"master\";\n    SearchTypeEnum[\"ARTIST\"] = \"artist\";\n    SearchTypeEnum[\"LABEL\"] = \"label\";\n})(SearchTypeEnum || (SearchTypeEnum = {}));\n\nvar UserSortEnum;\n(function (UserSortEnum) {\n    UserSortEnum[\"LABEL\"] = \"label\";\n    UserSortEnum[\"ARTIST\"] = \"artist\";\n    UserSortEnum[\"TITLE\"] = \"title\";\n    UserSortEnum[\"CATNO\"] = \"catno\";\n    UserSortEnum[\"FORMAT\"] = \"format\";\n    UserSortEnum[\"RATING\"] = \"rating\";\n    UserSortEnum[\"YEAR\"] = \"year\";\n    UserSortEnum[\"ADDED\"] = \"added\";\n})(UserSortEnum || (UserSortEnum = {}));\n\nclass AuthError extends Error {\n    constructor() {\n        super();\n        this.name = 'AuthError';\n        this.message = 'Unauthorized';\n        this.statusCode = 401;\n        Object.setPrototypeOf(this, AuthError.prototype);\n    }\n}\n\nclass DiscogsError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.message = message;\n        this.name = 'DiscogsError';\n        this.statusCode = code;\n        Object.setPrototypeOf(this, DiscogsError.prototype);\n    }\n}\n\n/**\n * HTTP verbs.\n *\n * @internal\n */\nvar HTTPVerbsEnum;\n(function (HTTPVerbsEnum) {\n    HTTPVerbsEnum[\"GET\"] = \"GET\";\n    HTTPVerbsEnum[\"POST\"] = \"POST\";\n    HTTPVerbsEnum[\"PUT\"] = \"PUT\";\n    HTTPVerbsEnum[\"DELETE\"] = \"DELETE\";\n})(HTTPVerbsEnum || (HTTPVerbsEnum = {}));\n/**\n * Fetch helper.\n *\n * @param url - URL to fetch\n * @param options - Fetch options\n * @returns\n * @throws\n *\n * @internal\n */\nasync function fetch(url, options, shouldReturnBlob) {\n    const response = await crossFetch(url, options);\n    // Check status\n    const { status, statusText } = response;\n    if (status === 401)\n        throw new AuthError();\n    if (status < 200 || status >= 300)\n        throw new DiscogsError(statusText, status);\n    if (status === 204)\n        return Promise.resolve({});\n    if (shouldReturnBlob) {\n        const blob = await response.blob();\n        return blob;\n    }\n    const data = await response.json();\n    return data;\n}\n/**\n * Helper to add query to a URI. Strips undefined values.\n *\n * @param uri - Endpoint to which query will be appended.\n * @param query\n * @returns URI + query\n *\n * @internal\n */\nfunction addQueryToUri(uri, query) {\n    const definedKeys = Object.entries(query).reduce((acc, [key, value]) => {\n        if (typeof value === 'undefined')\n            return acc;\n        return {\n            ...acc,\n            [key]: value,\n        };\n    }, {});\n    return `${uri}?${stringify(definedKeys)}`;\n}\n/**\n * Helper to transform camelcased data keys to snakecased one and rename `currency` to `curr_abbr`.\n *\n * @param data\n * @returns Tranformed `data` object.\n *\n * @internal\n */\nfunction transformData(data) {\n    return Object.entries(data).reduce((acc, [key, value]) => ({\n        ...acc,\n        [key === 'currency' ? 'curr_abbr' : key.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`)]: value,\n    }), {});\n}\n\n/**\n * Helper to create a new instance of Bottleneck.\n *\n * @internal\n */\nfunction createLimiter({ concurrency = 1, maxRequests, requestLimitInterval }) {\n    return new Bottleneck({\n        maxConcurrent: concurrency,\n        minTime: requestLimitInterval / maxRequests,\n        reservoir: maxRequests,\n        reservoirRefreshAmount: maxRequests,\n        reservoirRefreshInterval: requestLimitInterval,\n    });\n}\n\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_PER_PAGE = 50;\n/**\n * Paginate helper.\n *\n * @internal\n */\nfunction paginate(options) {\n    const { page = DEFAULT_PAGE, perPage = DEFAULT_PER_PAGE } = options || {};\n    return {\n        // Minimum page is 1\n        page: Math.max(DEFAULT_PAGE, page),\n        // Maximum items per page are 100\n        per_page: perPage <= 0 || perPage > 100 ? DEFAULT_PER_PAGE : perPage,\n    };\n}\n\nvar SortOrdersEnum;\n(function (SortOrdersEnum) {\n    SortOrdersEnum[\"ASC\"] = \"asc\";\n    SortOrdersEnum[\"DESC\"] = \"desc\";\n})(SortOrdersEnum || (SortOrdersEnum = {}));\n/**\n * Sort by helper.\n *\n * @internal\n */\nfunction sortBy(defaultSortBy, options) {\n    const { by = defaultSortBy, order = SortOrdersEnum.ASC } = options || {};\n    return {\n        sort: by,\n        sort_order: order,\n    };\n}\n\n/**\n * Base API URL to which URI will be appended.\n *\n * @internal\n */\nconst API_BASE_URL = 'https://api.discogs.com';\n/**\n * Base URL dedicated to Discogs images.\n *\n * @internal\n */\nconst IMG_BASE_URL = 'https://img.discogs.com';\n/**\n * Discogs API version.\n *\n * @internal\n */\nconst API_VERSION = 'v2';\n/**\n * Default user-agent to be used in requests.\n *\n * @internal\n */\nconst DEFAULT_USER_AGENT = `Discojs/2.0.0`;\n/**\n * Available output formats.\n *\n * @todo Edit types depending on chosen output format.\n */\nvar OutputFormatsEnum;\n(function (OutputFormatsEnum) {\n    OutputFormatsEnum[\"DISCOGS\"] = \"discogs\";\n    // PLAIN = 'plaintext',\n    // HTML = 'html',\n})(OutputFormatsEnum || (OutputFormatsEnum = {}));\n/**\n * Type guard to check if authenticated thanks to user token.\n *\n * @internal\n */\nfunction isAuthenticatedWithToken(options) {\n    return Boolean(options) && typeof options.userToken === 'string';\n}\n/**\n * Type guard to check if authenticated thanks to consumer key.\n *\n * @internal\n */\nfunction isAuthenticatedWithConsumerKey(options) {\n    return (Boolean(options) &&\n        typeof options.consumerKey === 'string' &&\n        typeof options.consumerSecret === 'string' &&\n        typeof options.oAuthToken === 'string' &&\n        typeof options.oAuthTokenSecret === 'string');\n}\n/**\n * Type guard to check whether requests are authenticated or not.\n *\n * @internal\n */\nfunction isAuthenticated(options) {\n    return isAuthenticatedWithToken(options) || isAuthenticatedWithConsumerKey(options);\n}\n/**\n * Discojs.\n */\nclass Discojs {\n    constructor(options) {\n        const { userAgent = DEFAULT_USER_AGENT, outputFormat = OutputFormatsEnum.DISCOGS, requestLimit = 25, requestLimitAuth = 60, requestLimitInterval = 60 * 1000, fetchOptions = {}, } = options || {};\n        this.userAgent = userAgent;\n        this.outputFormat = outputFormat;\n        this.limiter = createLimiter({\n            maxRequests: isAuthenticated(options) ? requestLimitAuth : requestLimit,\n            requestLimitInterval,\n        });\n        this.fetchOptions = fetchOptions;\n        this.fetchHeaders = new Headers({\n            Accept: `application/vnd.discogs.${API_VERSION}.${this.outputFormat}+json`,\n            'Accept-Encoding': 'gzip,deflate',\n            Connection: 'close',\n            'Content-Type': 'application/json',\n            'User-Agent': this.userAgent,\n        });\n        if (isAuthenticatedWithToken(options))\n            this.setAuthorizationHeader = () => `Discogs token=${options.userToken}`;\n        if (isAuthenticatedWithConsumerKey(options)) {\n            const oAuth = new OAuth({\n                consumer: { key: options.consumerKey, secret: options.consumerSecret },\n                signature_method: 'PLAINTEXT',\n                version: '1.0',\n            });\n            this.setAuthorizationHeader = (url, method) => {\n                if (!url || !method)\n                    return '';\n                const authObject = oAuth.authorize({ url, method }, { key: options.oAuthToken, secret: options.oAuthTokenSecret });\n                return oAuth.toHeader(authObject).Authorization;\n            };\n        }\n    }\n    /**\n     * Return currencies supported by Discogs.\n     *\n     * @category Helpers\n     *\n     * @static\n     */\n    static getSupportedCurrencies() {\n        return Object.values(CurrenciesEnum);\n    }\n    /**\n     * Return release conditions supported by Discogs.\n     *\n     * @category Helpers\n     *\n     * @static\n     */\n    static getReleaseConditions() {\n        return Object.values(ReleaseConditionsEnum);\n    }\n    /**\n     * Return slevve conditions supported by Discogs.\n     *\n     * @category Helpers\n     *\n     * @static\n     */\n    static getSleeveConditions() {\n        return Object.values(SleeveConditionsEnum);\n    }\n    /**\n     * Private method used within other methods.\n     *\n     * @private\n     * @internal\n     */\n    async fetch(uri, query, method, data) {\n        const isApiEndpoint = uri.startsWith(API_BASE_URL);\n        const isImgEndpoint = uri.startsWith(IMG_BASE_URL);\n        const endpoint = isImgEndpoint || isApiEndpoint\n            ? uri\n            : API_BASE_URL + (query && typeof query === 'object' ? addQueryToUri(uri, query) : uri);\n        const options = {\n            ...this.fetchOptions,\n            method: method || HTTPVerbsEnum.GET,\n        };\n        // Set Authorization header.\n        if (this.setAuthorizationHeader)\n            this.fetchHeaders.set('Authorization', this.setAuthorizationHeader(uri, method || HTTPVerbsEnum.GET));\n        const clonedHeaders = new Map(this.fetchHeaders);\n        if (data) {\n            const stringifiedData = JSON.stringify(transformData(data));\n            options.body = stringifiedData;\n            clonedHeaders.set('Content-Type', 'application/json');\n            clonedHeaders.set('Content-Length', Buffer.byteLength(stringifiedData, 'utf8').toString());\n        }\n        options.headers = Object.fromEntries(clonedHeaders);\n        return this.limiter.schedule(() => fetch(endpoint, options, isImgEndpoint));\n    }\n    /**\n     * Retrieve basic information about the authenticated user.\n     *\n     * @remarks\n     * You can use this resource to find out who you’re authenticated as, and it also doubles as a good sanity check to ensure that you’re using OAuth correctly.\n     *\n     * @category User Identity\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-identity\n     */\n    async getIdentity() {\n        return this.fetch('/oauth/identity');\n    }\n    /**\n     * Retrieve authenticated user's username.\n     *\n     * @remarks\n     * Used internally within methods that use `username` as a param.\n     *\n     * @category User Identity\n     *\n     * @private\n     */\n    async getUsername() {\n        const { username } = await this.getIdentity();\n        return username;\n    }\n    /**\n     * Retrieve user's profile by username.\n     *\n     * @remarks\n     * If authenticated as the requested user, the `email` key will be visible, and the `num_list count` will include the user’s private lists.\n     * If authenticated as the requested user or the user’s collection/wantlist is public, the `num_collection` / `num_wantlist` keys will be visible.\n     *\n     * @category User Profile\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile\n     */\n    async getProfileForUser(username) {\n        return this.fetch(`/users/${username}`);\n    }\n    /**\n     * Retrieve authenticated user's profile.\n     *\n     * @category User Profile\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile\n     */\n    async getProfile() {\n        const username = await this.getUsername();\n        return this.getProfileForUser(username);\n    }\n    /**\n     * Edit a user’s profile data.\n     *\n     * @category User Profile\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile\n     */\n    async editProfile(options) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}`, {}, HTTPVerbsEnum.POST, { username, ...options });\n    }\n    /**\n     * Retrieve a user’s submissions by username.\n     *\n     * @category User Submissions\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-submissions\n     */\n    async getSubmissionsForUser(username, pagination) {\n        return this.fetch(`/users/${username}/submissions`, paginate(pagination));\n    }\n    /**\n     * Retrieve authenticated user’s submissions.\n     *\n     * @category User Submissions\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-submissions\n     */\n    async getSubmissions(pagination) {\n        const username = await this.getUsername();\n        return this.getSubmissionsForUser(username, pagination);\n    }\n    /**\n     * Retrieve a user’s contributions by username.\n     *\n     * @category User Contributions\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-contributions\n     */\n    async getContributionsForUser(username, sort, pagination) {\n        return this.fetch(`/users/${username}/contributions`, {\n            ...sortBy(UserSortEnum.ADDED, sort),\n            ...paginate(pagination),\n        });\n    }\n    /**\n     * Retrieve authenticated user’s contributions.\n     *\n     * @category User Contributions\n     *\n     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-contributions\n     */\n    async getContributions(sort, pagination) {\n        const username = await this.getUsername();\n        return this.getContributionsForUser(username, sort, pagination);\n    }\n    /**\n     * Retrieve a list of folders in a user’s collection.\n     *\n     * @remarks\n     * If the collection has been made private by its owner, authentication as the collection owner is required.\n     * If you are not authenticated as the collection owner, only folder ID 0 (the “All” folder) will be visible (if the requested user’s collection is public).\n     *\n     * @category User Collection\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection\n     */\n    async listFoldersForUser(username) {\n        return this.fetch(`/users/${username}/collection/folders`);\n    }\n    /**\n     * Retrieve a list of folders in authenticated user’s collection.\n     *\n     * @category User Collection\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection\n     */\n    async listFolders() {\n        const username = await this.getUsername();\n        return this.listFoldersForUser(username);\n    }\n    /**\n     * Create a new folder in authenticated user’s collection.\n     *\n     * @category User Collection\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection\n     */\n    async createFolder(name) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders`, {}, HTTPVerbsEnum.POST, { name });\n    }\n    /**\n     * Retrieve metadata about a folder in a user’s collection.\n     *\n     * @remarks\n     * If folder_id is not 0, authentication as the collection owner is required.\n     *\n     * @category User Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder\n     */\n    async getFolderForUser(username, folderId) {\n        return this.fetch(`/users/${username}/collection/folders/${folderId}`);\n    }\n    /**\n     * Retrieve metadata about a folder in authenticated user’s collection.\n     *\n     * @category User Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder\n     */\n    async getFolder(folderId) {\n        const username = await this.getUsername();\n        return this.getFolderForUser(username, folderId);\n    }\n    /**\n     * Edit a folder’s metadata.\n     *\n     * @remarks\n     * Folders 0 and 1 cannot be renamed.\n     *\n     * @category User Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder\n     */\n    async editFolder(folderId, name) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}`, {}, HTTPVerbsEnum.POST, {\n            name,\n        });\n    }\n    /**\n     * Delete a folder from a user’s collection.\n     *\n     * @remarks\n     * A folder must be empty before it can be deleted.\n     *\n     * @category User Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder\n     */\n    async deleteFolder(folderId) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}`, {}, HTTPVerbsEnum.DELETE);\n    }\n    /**\n     * View the user’s collection folders which contain a specified release. This will also show information about each release instance.\n     *\n     * @remarks\n     * Authentication as the collection owner is required if the owner’s collection is private.\n     *\n     * @category User\n     * @label Items By Release\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-release\n     */\n    async listItemsByReleaseForUser(username, release_id, pagination) {\n        return this.fetch(`/users/${username}/collection/releases/${release_id}`, paginate(pagination));\n    }\n    /**\n     * View authenticated user’s collection folders which contain a specified release. This will also show information about each release instance.\n     *\n     * @category User\n     * @label Items By Release\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-release\n     */\n    async listItemsByRelease(release_id, pagination) {\n        const username = await this.getUsername();\n        return this.listItemsByReleaseForUser(username, release_id, pagination);\n    }\n    /**\n     * Returns the list of item in a folder in a user’s collection.\n     *\n     * @remarks\n     * Basic information about each release is provided, suitable for display in a list. For detailed information, make another API call to fetch the corresponding release.\n     * If folder_id is not 0, or the collection has been made private by its owner, authentication as the collection owner is required.\n     * If you are not authenticated as the collection owner, only public notes fields will be visible.\n     *\n     * @category User\n     * @label Collection Items By Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-folder\n     */\n    async listItemsInFolderForUser(username, folderId, sort, pagination) {\n        return this.fetch(`/users/${username}/collection/folders/${folderId}/releases`, {\n            ...sortBy(UserSortEnum.ADDED, sort),\n            ...paginate(pagination),\n        });\n    }\n    /**\n     * Returns the list of item in a folder in authenticated user’s collection.\n     *\n     * @remarks\n     * Basic information about each release is provided, suitable for display in a list. For detailed information, make another API call to fetch the corresponding release.\n     *\n     * @category User\n     * @label Collection Items By Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-folder\n     */\n    async listItemsInFolder(folderId, sort, pagination) {\n        const username = await this.getUsername();\n        return this.listItemsInFolderForUser(username, folderId, sort, pagination);\n    }\n    /**\n     * Add a release to a folder in authenticated user’s collection.\n     *\n     * @category User\n     * @label Add To Collection Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-add-to-collection-folder\n     */\n    async addReleaseToFolder(releaseId, folderId = FolderIdsEnum.UNCATEGORIZED) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}/releases/${releaseId}`, {}, HTTPVerbsEnum.POST);\n    }\n    /**\n     * Change the rating on a release.\n     *\n     * @category User\n     * @label Change Rating Of Release\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-change-rating-of-release\n     */\n    async editReleaseInstanceRating(folderId, releaseId, instanceId, rating) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}/releases/${releaseId}/instances/${instanceId}`, {}, HTTPVerbsEnum.POST, { rating });\n    }\n    /**\n     * Move the instance of a release to another folder.\n     *\n     * @category User\n     * @label Change Rating Of Release\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-change-rating-of-release\n     */\n    async moveReleaseInstanceToFolder(oldFolderId, releaseId, instanceId, newFolderId) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${oldFolderId}/releases/${releaseId}/instances/${instanceId}`, {}, HTTPVerbsEnum.POST, { folderId: newFolderId });\n    }\n    /**\n     * Remove an instance of a release from authenticated user’s collection folder.\n     *\n     * @category User\n     * @label Delete Instance From Folder\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-delete-instance-from-folder\n     */\n    async deleteReleaseInstanceFromFolder(folderId, releaseId, instanceId) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}/releases/${releaseId}/instances/${instanceId}`, {}, HTTPVerbsEnum.DELETE);\n    }\n    /**\n     * Retrieve a list of user-defined collection notes fields. These fields are available on every release in the collection.\n     *\n     * @remarks\n     * If the collection has been made private by its owner, authentication as the collection owner is required.\n     * If you are not authenticated as the collection owner, only fields with `public` set to true will be visible.\n     *\n     * @category User\n     * @label List Custom Fields\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-list-custom-fields\n     */\n    async listCustomFieldsForUser(username) {\n        return this.fetch(`/users/${username}/collection/fields`);\n    }\n    /**\n     * Retrieve a list of authenticated user-defined collection notes fields. These fields are available on every release in the collection.\n     *\n     * @category User\n     * @label List Custom Fields\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-list-custom-fields\n     */\n    async listCustomFields() {\n        const username = await this.getUsername();\n        return this.listCustomFieldsForUser(username);\n    }\n    /**\n     * Change the value of a notes field on a particular instance.\n     *\n     * @category User\n     * @label Edit Fields Instance\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-edit-fields-instance\n     */\n    async editCustomFieldForInstance(folderId, releaseId, instanceId, fieldId, value) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/folders/${folderId}/releases/${releaseId}/instances/${instanceId}/fields/${fieldId}`, { value }, HTTPVerbsEnum.POST);\n    }\n    /**\n     * Returns the minimum, median, and maximum value of authenticated user’s collection.\n     *\n     * @requires authentication\n     *\n     * @category User\n     * @label Collection Value\n     *\n     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-value\n     */\n    async getCollectionValue() {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/collection/value`);\n    }\n    /**\n     * Returns the list of releases in a user’s wantlist.\n     * Basic information about each release is provided, suitable for display in a list.\n     * For detailed information, make another API call to fetch the corresponding release.\n     *\n     * @remarks\n     * If the wantlist has been made private by its owner, you must be authenticated as the owner to view it.\n     * The `notes` field will be visible if you are authenticated as the wantlist owner.\n     *\n     * @category User\n     * @label Wantlist\n     *\n     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-wantlist\n     */\n    async getWantlistForUser(username, pagination) {\n        return this.fetch(`/users/${username}/wants`, paginate(pagination));\n    }\n    /**\n     * Returns the list of releases in authenticated user’s wantlist.\n     * Basic information about each release is provided, suitable for display in a list.\n     * For detailed information, make another API call to fetch the corresponding release.\n     *\n     * @category User\n     * @label Wantlist\n     *\n     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-wantlist\n     */\n    async getWantlist(pagination) {\n        const username = await this.getUsername();\n        return this.getWantlistForUser(username, pagination);\n    }\n    /**\n     * Add a release to authenticated user’s wantlist.\n     *\n     * @category User\n     * @label Add to wantlist\n     *\n     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-add-to-wantlist\n     */\n    async addToWantlist(releaseId, notes, rating) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/wants/${releaseId}`, { notes, rating }, HTTPVerbsEnum.PUT);\n    }\n    /**\n     * Remove a release to authenticated user’s wantlist.\n     *\n     * @category User\n     * @label Add to wantlist\n     *\n     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-add-to-wantlist\n     */\n    async removeFromWantlist(releaseId) {\n        const username = await this.getUsername();\n        return this.fetch(`/users/${username}/wants/${releaseId}`, {}, HTTPVerbsEnum.DELETE);\n    }\n    /**\n     * Returns user’s lists.\n     *\n     * @remarks\n     * Private lists will only display when authenticated as the owner.\n     *\n     * @category User\n     * @label Lists\n     *\n     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists\n     */\n    async getListsForUser(username, pagination) {\n        return this.fetch(`/users/${username}/lists`, paginate(pagination));\n    }\n    /**\n     * Returns authenticated user’s lists.\n     *\n     * @category User\n     * @label Lists\n     *\n     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists\n     */\n    async getLists(pagination) {\n        const username = await this.getUsername();\n        return this.getListsForUser(username, pagination);\n    }\n    /**\n     * Returns items from a specified list.\n     *\n     * @remarks\n     * Private lists will only display when authenticated as the owner.\n     *\n     * @category User\n     * @label Lists\n     *\n     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists\n     */\n    async getListItems(listId) {\n        return this.fetch(`/lists/${listId}`);\n    }\n    /**\n     * Issue a search query to Discogs database.\n     *\n     * @category Database\n     * @label Search\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-search\n     */\n    async searchDatabase(options = {}, pagination) {\n        return this.fetch('/database/search', { ...options, ...paginate(pagination) });\n    }\n    /**\n     * Search for a release.\n     *\n     * @category Database\n     * @label Search\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-search\n     */\n    async searchRelease(query, options = {}, pagination) {\n        return this.searchDatabase({ ...options, query, type: SearchTypeEnum.RELEASE }, pagination);\n    }\n    /**\n     * Get a release.\n     *\n     * @category Database\n     * @label Release\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-release\n     */\n    async getRelease(releaseId, currency) {\n        return this.fetch(`/releases/${releaseId}`, { currency });\n    }\n    /**\n     * Retrieves the release’s rating for a given user.\n     *\n     * @category Database\n     * @label Release Rating\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user\n     */\n    async getReleaseRatingForUser(username, releaseId) {\n        return this.fetch(`/releases/${releaseId}/rating/${username}`);\n    }\n    /**\n     * Retrieves the release’s rating for the authenticated user.\n     *\n     * @category Database\n     * @label Release Rating\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user\n     */\n    async getReleaseRating(releaseId) {\n        const username = await this.getUsername();\n        return this.getReleaseRatingForUser(username, releaseId);\n    }\n    /**\n     * Updates the release’s rating for the authenticated user.\n     *\n     * @category Database\n     * @label Release Rating\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user\n     */\n    async updateReleaseRating(releaseId, rating) {\n        const username = await this.getUsername();\n        return this.fetch(`/releases/${releaseId}/rating/${username}`, {}, HTTPVerbsEnum.PUT, {\n            rating,\n        });\n    }\n    /**\n     * Deletes the release’s rating for the authenticated user.\n     *\n     * @category Database\n     * @label Release Rating\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user\n     */\n    async deleteReleaseRating(releaseId) {\n        const username = await this.getUsername();\n        return this.fetch(`/releases/${releaseId}/rating/${username}`, {}, HTTPVerbsEnum.DELETE);\n    }\n    /**\n     * Retrieves the community release rating average and count.\n     *\n     * @category Database\n     * @label Community Release Rating\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-community-release-rating\n     */\n    async getCommunityReleaseRating(releaseId) {\n        return this.fetch(`/releases/${releaseId}/rating`);\n    }\n    /**\n     * Search for a master release.\n     *\n     * @category Database\n     * @label Search\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-search\n     */\n    async searchMaster(query, options = {}, pagination) {\n        return this.searchDatabase({ ...options, query, type: SearchTypeEnum.MASTER }, pagination);\n    }\n    /**\n     * Get a master release.\n     *\n     * @category Database\n     * @label Master Release\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-master-release\n     */\n    async getMaster(masterId) {\n        return this.fetch(`/masters/${masterId}`);\n    }\n    /**\n     * Retrieves a list of all releases that are versions of a master.\n     *\n     * @category Database\n     * @label Master Release Versions\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-master-release-versions\n     */\n    // @TODO: There are a lot of parameters not handled here\n    async getMasterVersions(masterId, pagination) {\n        return this.fetch(`/masters/${masterId}/versions`, paginate(pagination));\n    }\n    /**\n     * Search for an artist.\n     *\n     * @category Database\n     * @label Search\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-search\n     */\n    async searchArtist(query, options = {}, pagination) {\n        return this.searchDatabase({ ...options, query, type: SearchTypeEnum.ARTIST }, pagination);\n    }\n    /**\n     * Get an artist.\n     *\n     * @category Database\n     * @label Artist\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-artist\n     */\n    async getArtist(artistId) {\n        return this.fetch(`/artists/${artistId}`);\n    }\n    /**\n     * Returns a list of releases and masters associated with an artist.\n     *\n     * @category Database\n     * @label Artist Releases\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-artist-releases\n     */\n    async getArtistReleases(artistId, sort, pagination) {\n        return this.fetch(`/artists/${artistId}/releases`, {\n            ...sortBy(ReleaseSortEnum.YEAR, sort),\n            ...paginate(pagination),\n        });\n    }\n    /**\n     * Search for a label.\n     *\n     * @category Database\n     * @label Search\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-search\n     */\n    async searchLabel(query, options = {}, pagination) {\n        return this.searchDatabase({ ...options, query, type: SearchTypeEnum.LABEL }, pagination);\n    }\n    /**\n     * Get a label.\n     *\n     * @category Database\n     * @label Label\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-label\n     */\n    async getLabel(labelId) {\n        return this.fetch(`/labels/${labelId}`);\n    }\n    /**\n     * Returns a list of releases associated with the label.\n     *\n     * @category Database\n     * @label Label Releases\n     *\n     * @link https://www.discogs.com/developers#page:database,header:database-all-label-releases\n     */\n    async getLabelReleases(labelId, pagination) {\n        return this.fetch(`/labels/${labelId}/releases`, paginate(pagination));\n    }\n    /**\n     * Get a seller’s inventory.\n     *\n     * @remarks\n     * If you are not authenticated as the inventory owner, only items that have a status of For Sale will be visible.\n     * If you are authenticated as the inventory owner you will get additional weight, format_quantity, external_id, and location keys.\n     * If the user is authorized, the listing will contain a `in_cart` boolean field indicating whether or not this listing is in their cart.\n     *\n     * @category Marketplace\n     * @label Inventory\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-inventory\n     */\n    async getInventoryForUser(username, status = InventoryStatusesEnum.ALL, sort, pagination) {\n        return this.fetch(`/users/${username}/inventory`, {\n            status,\n            ...sortBy(InventorySortEnum.LISTED, sort),\n            ...paginate(pagination),\n        });\n    }\n    /**\n     * Get authenticated user’s inventory.\n     *\n     * @category Marketplace\n     * @label Inventory\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-inventory\n     */\n    async getInventory(status, sort, pagination) {\n        const username = await this.getUsername();\n        return this.getInventoryForUser(username, status, sort, pagination);\n    }\n    /**\n     * View the data associated with a listing.\n     *\n     * @remarks\n     * If the authorized user is the listing owner the listing will include the weight, format_quantity, external_id, and location keys.\n     * If the user is authorized, the listing will contain a in_cart boolean field indicating whether or not this listing is in their cart.\n     *\n     * @category Marketplace\n     * @label Listing\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing\n     */\n    async getListing(listingId, currency) {\n        return this.fetch(`/marketplace/listings/${listingId}`, { currency });\n    }\n    /**\n     * Edit the data associated with a listing.\n     *\n     * @remarks\n     * If the listing’s status is not For Sale, Draft, or Expired, it cannot be modified – only deleted.\n     *\n     * @category Marketplace\n     * @label Listing\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing\n     */\n    async editListing(listingId, options, currency) {\n        return this.fetch(`/marketplace/listings/${listingId}`, { currency }, HTTPVerbsEnum.POST, options);\n    }\n    /**\n     * Permanently remove a listing from the Marketplace.\n     *\n     * @category Marketplace\n     * @label Listing\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing\n     */\n    async deleteListing(listingId) {\n        return this.fetch(`/marketplace/listings/${listingId}`, {}, HTTPVerbsEnum.DELETE);\n    }\n    /**\n     * Create a Marketplace listing.\n     *\n     * @category Marketplace\n     * @label Listing\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-new-listing\n     */\n    async createListing(options) {\n        return this.fetch('/marketplace/listings/', {}, HTTPVerbsEnum.POST, options);\n    }\n    /**\n     * View the data associated with an order.\n     *\n     * @category Marketplace\n     * @label Order\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-order\n     */\n    async getOrder(orderId) {\n        return this.fetch(`/marketplace/orders/${orderId}`);\n    }\n    /**\n     * Edit the data associated with an order.\n     *\n     * @category Marketplace\n     * @label Order\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-order\n     */\n    async editOrder(orderId, status, shipping) {\n        return this.fetch(`/marketplace/orders/${orderId}`, {}, HTTPVerbsEnum.POST, { status, shipping });\n    }\n    /**\n     * Returns a list of the authenticated user’s orders.\n     *\n     * @category Marketplace\n     * @label Order\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-orders\n     */\n    async listOrders(status, archived, sort, pagination) {\n        return this.fetch('/marketplace/orders', {\n            status,\n            archived,\n            ...sortBy(OrderSortEnum.ID, sort),\n            ...paginate(pagination),\n        });\n    }\n    /**\n     * Returns a list of the order’s messages with the most recent first.\n     *\n     * @category Marketplace\n     * @label Order Messages\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-order-messages\n     */\n    async listOrderMessages(orderId) {\n        return this.fetch(`/marketplace/orders/${orderId}/messages`);\n    }\n    /**\n     * Adds a new message to the order’s message log.\n     *\n     * @remarks\n     * When posting a new message, you can simultaneously change the order status.\n     * If you do, the message will automatically be prepended with: \"Seller changed status from `Old Status` to `New Status`\"\n     * While message and status are each optional, one or both must be present.\n     *\n     * @category Marketplace\n     * @label Order Messages\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-order-messages\n     */\n    async sendOrderMessage(orderId, message, status) {\n        return this.fetch(`/marketplace/orders/${orderId}/messages`, {}, HTTPVerbsEnum.POST, {\n            message,\n            status,\n        });\n    }\n    /**\n     * The Fee resource allows you to quickly calculate the fee for selling an item on the Marketplace.\n     *\n     * @category Marketplace\n     * @label Fee\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-fee\n     */\n    async getFee(price, currency) {\n        let uri = `/marketplace/fee/${price}`;\n        if (currency)\n            uri += `/${currency}`;\n        return this.fetch(uri);\n    }\n    /**\n     * Retrieve price suggestions for the provided Release ID.\n     *\n     * @remarks\n     * Suggested prices will be denominated in the user’s selling currency.\n     *\n     * @category Marketplace\n     * @label Price Suggestions\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-price-suggestions\n     */\n    async getPriceSuggestions(releaseId) {\n        return this.fetch(`/marketplace/price_suggestions/${releaseId}`);\n    }\n    /**\n     * Retrieve marketplace statistics for the provided Release ID.\n     *\n     * @remarks\n     * These statistics reflect the state of the release in the marketplace currently, and include the number of items currently for sale,\n     * lowest listed price of any item for sale, and whether the item is blocked for sale in the marketplace.\n     *\n     *\n     * @category Marketplace\n     * @label Release Statistics\n     *\n     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-release-statistics\n     */\n    async getMarketplaceStatistics(releaseId, currency) {\n        return this.fetch(`/marketplace/stats/${releaseId}`, { currency });\n    }\n    /**\n     * Retrieve an image retrieved in another response.\n     *\n     * @requires authentication\n     *\n     * @category Helpers\n     *\n     * @link https://www.discogs.com/developers#page:images\n     */\n    async fetchImage(imageUrl) {\n        return this.fetch(imageUrl);\n    }\n    next(response) {\n        const { next } = response.pagination.urls;\n        if (next === undefined) {\n            return Promise.resolve(undefined);\n        }\n        return this.fetch(next);\n    }\n    async all(key, response, onProgress) {\n        let result = [];\n        while (response !== undefined) {\n            const data = response[key];\n            onProgress?.(data);\n            result = result.concat(data);\n            // eslint-disable-next-line no-await-in-loop, no-param-reassign\n            response = await this.next(response);\n            if (response === undefined) {\n                break;\n            }\n        }\n        return result;\n    }\n}\n\nexport { AuthError, CommunityStatusesEnum, CurrenciesEnum, DataQualityEnum, DiscogsError, Discojs, EditOrderStatusesEnum, FolderIdsEnum, InventorySortEnum, InventoryStatusesEnum, ListingStatusesEnum, OrderMessageTypesEnum, OrderSortEnum, OrderStatusesEnum, ReleaseConditionsEnum, ReleaseSortEnum, SearchTypeEnum, SleeveConditionsEnum, SortOrdersEnum, UserSortEnum };\n"],"sourceRoot":""}
{"version":3,"sources":["App.tsx","useStorageState.ts","reportWebVitals.ts","index.tsx"],"names":["App","storage","key","defaultValue","window","localStorage","sessionStorage","currentValue","storageSet","setItem","bind","storageValue","getItem","JSON","parse","e","console","error","undefined","result","React","useState","state","useEffect","stringify","useStorageState","token","setToken","data","setData","client","useCallback","Discojs","userAgent","userToken","Container","Form","Control","value","onChange","target","Button","onClick","a","getIdentity","d","src","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAiCeA,MAvBf,WAAgB,IAAD,ECNA,SACXC,EAAwCC,EAAaC,GACrC,UAAZF,EACAA,EAAUG,OAAOC,aACE,YAAZJ,IACPA,EAAUG,OAAOE,gBAErB,IAEIC,EAFEC,EAAaP,EAAQQ,QAAQC,KAAKT,EAASC,GAC3CS,EAAeV,EAAQW,QAAQV,GAErC,GAAqB,OAAjBS,EACA,IACIJ,EAAeM,KAAKC,MAAMH,GAC5B,MAAOI,GACLC,QAAQC,MAAMF,QAGDG,IAAjBX,IACAA,EAAeJ,GAEnB,IAAMgB,EAASC,IAAMC,SAAYd,GAC1Be,EApB8E,YAoBrEH,EApBqE,MAsBrF,OADAC,IAAMG,WAEN,WACIf,EAAWK,KAAKW,UAAUF,MAHN,CAACA,EAAOd,IACzBW,EDhBiBM,CAAwB,QAAS,mBAAoB,IADlE,mBACNC,EADM,KACCC,EADD,OAEWP,IAAMC,WAFjB,mBAENO,EAFM,KAEAC,EAFA,KAGPC,EAASV,IAAMW,aAAY,WAC/B,OAAO,IAAIC,IAAQ,CACjBC,UAAW,uDACXC,UAAWR,MAEZ,CAACA,IACJ,OAAO,eAACS,EAAA,EAAD,WACL,cAACC,EAAA,EAAKC,QAAN,CACEC,MAAOZ,EACPa,SAAU,gBAAUD,EAAV,EAAEE,OAAQF,MAAV,OAAsBX,EAASW,MAE3C,cAACG,EAAA,EAAD,CAAQC,QAAO,sBAAE,4BAAAC,EAAA,sEACCb,IAASc,cADV,OACTC,EADS,OAEfhB,EAAQgB,GAFO,2CAAjB,kBAICjB,GAAQ,cAAC,IAAD,CAAWkB,IAAKlB,IACxB,cAAC,IAAD,CAAWkB,IAAKC,kJEfNC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46bb2ff2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/esm/Container';\nimport Button from 'react-bootstrap/esm/Button';\nimport { Discojs } from 'discojs';\nimport ReactJson from 'react-json-view';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport useStorageState from './useStorageState';\nimport Form from 'react-bootstrap/esm/Form';\n\nfunction App() {\n  const [token, setToken] = useStorageState<string>(\"local\", \"DiscogsUserToken\", \"\");\n  const [data, setData] = React.useState<object>();\n  const client = React.useCallback(() => {\n    return new Discojs({\n      userAgent: \"Elephant/0.1.0 +https://pyrogenic.github.io/elephant\",\n      userToken: token,\n    });\n  }, [token]);\n  return <Container>\n    <Form.Control\n      value={token}\n      onChange={({target:{value}}) => setToken(value)}\n    />\n    <Button onClick={async () => {\n      const d = await client().getIdentity();\n      setData(d);\n    }}>Test</Button>\n    {data && <ReactJson src={data}/>}\n    {<ReactJson src={process.env}/>}\n  </Container>\n}\n\nexport default App;\n","import React from \"react\";\n\ntype TDefaultValue<T> = T | (T extends Function ? never : (() => T));\n\nexport default function useStorageState<T>(\n    storage: Storage | \"local\" | \"session\", key: string, defaultValue: TDefaultValue<T>) {\n    if (storage === \"local\") {\n        storage = window.localStorage;\n    } else if (storage === \"session\") {\n        storage = window.sessionStorage;\n    }\n    const storageSet = storage.setItem.bind(storage, key);\n    const storageValue = storage.getItem(key);\n    let currentValue: TDefaultValue<T> | undefined;\n    if (storageValue !== null) {\n        try {\n            currentValue = JSON.parse(storageValue) as TDefaultValue<T>;\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    if (currentValue === undefined) {\n        currentValue = defaultValue;\n    }\n    const result = React.useState<T>(currentValue);\n    const [state] = result;\n    React.useEffect(effect, [state, storageSet]);\n    return result;\n    function effect() {\n        storageSet(JSON.stringify(state));\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}